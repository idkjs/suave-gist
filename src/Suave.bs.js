// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function pure(a) {
  return Promise.resolve(Caml_option.some(a));
}

function fail(param) {
  return Promise.resolve(undefined);
}

function $great$eq$great(x, y, a) {
  return Curry._1(x, a).then(function (a) {
              if (a !== undefined) {
                return Curry._1(y, Caml_option.valFromOption(a));
              } else {
                return Promise.resolve(undefined);
              }
            });
}

function choose(options, arg) {
  if (!options) {
    return Promise.resolve(undefined);
  }
  var t = options.tl;
  return Curry._1(options.hd, arg).then(function (a) {
              if (a !== undefined) {
                return Promise.resolve(Caml_option.some(Caml_option.valFromOption(a)));
              } else {
                return choose(t, arg);
              }
            });
}

function filter(pred, arg) {
  if (Curry._1(pred, arg)) {
    return Promise.resolve(Caml_option.some(arg));
  } else {
    return Promise.resolve(undefined);
  }
}

function get(param) {
  return filter((function (param) {
                if (param.method === "GET") {
                  return true;
                } else {
                  return false;
                }
              }), param);
}

function put(param) {
  return filter((function (param) {
                if (param.method === "PUT") {
                  return true;
                } else {
                  return false;
                }
              }), param);
}

function post(param) {
  return filter((function (param) {
                if (param.method === "POST") {
                  return true;
                } else {
                  return false;
                }
              }), param);
}

function $$delete(param) {
  return filter((function (param) {
                if (param.method === "DELETE") {
                  return true;
                } else {
                  return false;
                }
              }), param);
}

function path(p) {
  return function (param) {
    return filter((function (http) {
                  return http.path === p;
                }), param);
  };
}

function convert(a) {
  var s = JSON.stringify(a);
  if (s !== undefined) {
    return JSON.parse(s);
  } else {
    return null;
  }
}

function setStatus(code, content, http) {
  var a = Curry._2(http.send, code, convert(content));
  return Promise.resolve(Caml_option.some(a));
}

function ok(content) {
  return function (param) {
    return setStatus(200, content, param);
  };
}

function notFound(content) {
  return function (param) {
    return setStatus(404, content, param);
  };
}

function error(content) {
  return function (param) {
    return setStatus(500, content, param);
  };
}

var stores = [{
    number: 2304
  }];

function partial_arg_0(param) {
  return $great$eq$great(get, (function (param) {
                return setStatus(200, stores, param);
              }), param);
}

var partial_arg_1 = {
  hd: (function (param) {
      return $great$eq$great(post, (function (param) {
                    return setStatus(200, "posted stores", param);
                  }), param);
    }),
  tl: /* [] */0
};

var partial_arg = {
  hd: partial_arg_0,
  tl: partial_arg_1
};

function partial_arg$1(param) {
  return choose(partial_arg, param);
}

function partial_arg$2(param) {
  return filter((function (http) {
                return http.path === "/stores";
              }), param);
}

function partial_arg_0$1(param) {
  return $great$eq$great(get, (function (param) {
                return setStatus(200, "got items", param);
              }), param);
}

var partial_arg_1$1 = {
  hd: (function (param) {
      return $great$eq$great(post, (function (param) {
                    return setStatus(200, "posted items", param);
                  }), param);
    }),
  tl: /* [] */0
};

var partial_arg$3 = {
  hd: partial_arg_0$1,
  tl: partial_arg_1$1
};

function partial_arg$4(param) {
  return choose(partial_arg$3, param);
}

function partial_arg$5(param) {
  return filter((function (http) {
                return http.path === "/items";
              }), param);
}

function partial_arg_0$2(param) {
  return $great$eq$great(partial_arg$2, partial_arg$1, param);
}

var partial_arg_1$2 = {
  hd: (function (param) {
      return $great$eq$great(partial_arg$5, partial_arg$4, param);
    }),
  tl: {
    hd: (function (param) {
        return setStatus(404, "Like Bono, we still haven't found what you're looking for", param);
      }),
    tl: /* [] */0
  }
};

var partial_arg$6 = {
  hd: partial_arg_0$2,
  tl: partial_arg_1$2
};

function api(param) {
  return choose(partial_arg$6, param);
}

exports.pure = pure;
exports.fail = fail;
exports.$great$eq$great = $great$eq$great;
exports.choose = choose;
exports.filter = filter;
exports.get = get;
exports.put = put;
exports.post = post;
exports.$$delete = $$delete;
exports.path = path;
exports.convert = convert;
exports.setStatus = setStatus;
exports.ok = ok;
exports.notFound = notFound;
exports.error = error;
exports.stores = stores;
exports.api = api;
/* No side effect */
